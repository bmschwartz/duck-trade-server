// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  currency: (where?: CurrencyWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  wallet: (where?: WalletWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  currency: (where: CurrencyWhereUniqueInput) => CurrencyPromise;
  currencies: (
    args?: {
      where?: CurrencyWhereInput;
      orderBy?: CurrencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Currency>;
  currenciesConnection: (
    args?: {
      where?: CurrencyWhereInput;
      orderBy?: CurrencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CurrencyConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  wallet: (where: WalletWhereUniqueInput) => WalletPromise;
  wallets: (
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Wallet>;
  walletsConnection: (
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WalletConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCurrency: (data: CurrencyCreateInput) => CurrencyPromise;
  updateCurrency: (
    args: { data: CurrencyUpdateInput; where: CurrencyWhereUniqueInput }
  ) => CurrencyPromise;
  updateManyCurrencies: (
    args: { data: CurrencyUpdateManyMutationInput; where?: CurrencyWhereInput }
  ) => BatchPayloadPromise;
  upsertCurrency: (
    args: {
      where: CurrencyWhereUniqueInput;
      create: CurrencyCreateInput;
      update: CurrencyUpdateInput;
    }
  ) => CurrencyPromise;
  deleteCurrency: (where: CurrencyWhereUniqueInput) => CurrencyPromise;
  deleteManyCurrencies: (where?: CurrencyWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWallet: (data: WalletCreateInput) => WalletPromise;
  updateWallet: (
    args: { data: WalletUpdateInput; where: WalletWhereUniqueInput }
  ) => WalletPromise;
  updateManyWallets: (
    args: { data: WalletUpdateManyMutationInput; where?: WalletWhereInput }
  ) => BatchPayloadPromise;
  upsertWallet: (
    args: {
      where: WalletWhereUniqueInput;
      create: WalletCreateInput;
      update: WalletUpdateInput;
    }
  ) => WalletPromise;
  deleteWallet: (where: WalletWhereUniqueInput) => WalletPromise;
  deleteManyWallets: (where?: WalletWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  currency: (
    where?: CurrencySubscriptionWhereInput
  ) => CurrencySubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  wallet: (
    where?: WalletSubscriptionWhereInput
  ) => WalletSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OrderSide = "BUY" | "SELL";

export type CurrencyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastPrice_ASC"
  | "lastPrice_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "side_ASC"
  | "side_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WalletOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface OrderUpdateInput {
  user?: UserUpdateOneRequiredWithoutOrdersInput;
  price?: Float;
  side?: OrderSide;
  currency?: CurrencyUpdateOneRequiredInput;
  quantity?: Float;
}

export type CurrencyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserCreateInput {
  username: String;
  password: String;
  orders?: OrderCreateManyWithoutUserInput;
  wallets?: WalletCreateManyWithoutUserInput;
}

export interface WalletUpdateWithWhereUniqueWithoutUserInput {
  where: WalletWhereUniqueInput;
  data: WalletUpdateWithoutUserDataInput;
}

export interface CurrencyCreateInput {
  name: String;
  lastPrice: Float;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CurrencyUpdateInput {
  name?: String;
  lastPrice?: Float;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CurrencyUpdateManyMutationInput {
  name?: String;
  lastPrice?: Float;
}

export interface WalletUpdateManyMutationInput {
  quantity?: Float;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput;
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  update?:
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  updateMany?:
    | OrderUpdateManyWithWhereNestedInput[]
    | OrderUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutWalletsInput {
  update: UserUpdateWithoutWalletsDataInput;
  create: UserCreateWithoutWalletsInput;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  orders?: OrderUpdateManyWithoutUserInput;
  wallets?: WalletUpdateManyWithoutUserInput;
}

export interface CurrencyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  lastPrice?: Float;
  lastPrice_not?: Float;
  lastPrice_in?: Float[] | Float;
  lastPrice_not_in?: Float[] | Float;
  lastPrice_lt?: Float;
  lastPrice_lte?: Float;
  lastPrice_gt?: Float;
  lastPrice_gte?: Float;
  AND?: CurrencyWhereInput[] | CurrencyWhereInput;
  OR?: CurrencyWhereInput[] | CurrencyWhereInput;
  NOT?: CurrencyWhereInput[] | CurrencyWhereInput;
}

export interface OrderCreateInput {
  user: UserCreateOneWithoutOrdersInput;
  price?: Float;
  side: OrderSide;
  currency: CurrencyCreateOneInput;
  quantity: Float;
}

export interface UserUpdateOneRequiredWithoutWalletsInput {
  create?: UserCreateWithoutWalletsInput;
  update?: UserUpdateWithoutWalletsDataInput;
  upsert?: UserUpsertWithoutWalletsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutWalletsInput {
  username: String;
  password: String;
  orders?: OrderCreateManyWithoutUserInput;
}

export interface UserCreateWithoutOrdersInput {
  username: String;
  password: String;
  wallets?: WalletCreateManyWithoutUserInput;
}

export interface WalletCreateInput {
  user: UserCreateOneWithoutWalletsInput;
  currency: CurrencyCreateOneInput;
  quantity: Float;
}

export interface WalletCreateManyWithoutUserInput {
  create?: WalletCreateWithoutUserInput[] | WalletCreateWithoutUserInput;
  connect?: WalletWhereUniqueInput[] | WalletWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface WalletCreateWithoutUserInput {
  currency: CurrencyCreateOneInput;
  quantity: Float;
}

export interface OrderUpdateManyDataInput {
  price?: Float;
  side?: OrderSide;
  quantity?: Float;
}

export interface CurrencyCreateOneInput {
  create?: CurrencyCreateInput;
  connect?: CurrencyWhereUniqueInput;
}

export interface OrderScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  side?: OrderSide;
  side_not?: OrderSide;
  side_in?: OrderSide[] | OrderSide;
  side_not_in?: OrderSide[] | OrderSide;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  OR?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  NOT?: OrderScalarWhereInput[] | OrderScalarWhereInput;
}

export interface OrderCreateWithoutUserInput {
  price?: Float;
  side: OrderSide;
  currency: CurrencyCreateOneInput;
  quantity: Float;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  update?: UserUpdateWithoutOrdersDataInput;
  upsert?: UserUpsertWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface UserUpdateWithoutOrdersDataInput {
  username?: String;
  password?: String;
  wallets?: WalletUpdateManyWithoutUserInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface WalletUpdateManyWithoutUserInput {
  create?: WalletCreateWithoutUserInput[] | WalletCreateWithoutUserInput;
  delete?: WalletWhereUniqueInput[] | WalletWhereUniqueInput;
  connect?: WalletWhereUniqueInput[] | WalletWhereUniqueInput;
  disconnect?: WalletWhereUniqueInput[] | WalletWhereUniqueInput;
  update?:
    | WalletUpdateWithWhereUniqueWithoutUserInput[]
    | WalletUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | WalletUpsertWithWhereUniqueWithoutUserInput[]
    | WalletUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: WalletScalarWhereInput[] | WalletScalarWhereInput;
  updateMany?:
    | WalletUpdateManyWithWhereNestedInput[]
    | WalletUpdateManyWithWhereNestedInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  side?: OrderSide;
  side_not?: OrderSide;
  side_in?: OrderSide[] | OrderSide;
  side_not_in?: OrderSide[] | OrderSide;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface OrderCreateManyWithoutUserInput {
  create?: OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface WalletWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  AND?: WalletWhereInput[] | WalletWhereInput;
  OR?: WalletWhereInput[] | WalletWhereInput;
  NOT?: WalletWhereInput[] | WalletWhereInput;
}

export interface WalletUpdateWithoutUserDataInput {
  currency?: CurrencyUpdateOneRequiredInput;
  quantity?: Float;
}

export interface UserCreateOneWithoutWalletsInput {
  create?: UserCreateWithoutWalletsInput;
  connect?: UserWhereUniqueInput;
}

export interface CurrencyUpdateOneRequiredInput {
  create?: CurrencyCreateInput;
  update?: CurrencyUpdateDataInput;
  upsert?: CurrencyUpsertNestedInput;
  connect?: CurrencyWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
}

export interface CurrencyUpdateDataInput {
  name?: String;
  lastPrice?: Float;
}

export type WalletWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CurrencyUpsertNestedInput {
  update: CurrencyUpdateDataInput;
  create: CurrencyCreateInput;
}

export interface WalletSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WalletWhereInput;
  AND?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
  OR?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
  NOT?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
}

export interface WalletUpsertWithWhereUniqueWithoutUserInput {
  where: WalletWhereUniqueInput;
  update: WalletUpdateWithoutUserDataInput;
  create: WalletCreateWithoutUserInput;
}

export interface UserUpdateWithoutWalletsDataInput {
  username?: String;
  password?: String;
  orders?: OrderUpdateManyWithoutUserInput;
}

export interface WalletScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  AND?: WalletScalarWhereInput[] | WalletScalarWhereInput;
  OR?: WalletScalarWhereInput[] | WalletScalarWhereInput;
  NOT?: WalletScalarWhereInput[] | WalletScalarWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface OrderUpdateManyMutationInput {
  price?: Float;
  side?: OrderSide;
  quantity?: Float;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface WalletUpdateManyDataInput {
  quantity?: Float;
}

export interface WalletUpdateManyWithWhereNestedInput {
  where: WalletScalarWhereInput;
  data: WalletUpdateManyDataInput;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface WalletUpdateInput {
  user?: UserUpdateOneRequiredWithoutWalletsInput;
  currency?: CurrencyUpdateOneRequiredInput;
  quantity?: Float;
}

export interface CurrencySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CurrencyWhereInput;
  AND?: CurrencySubscriptionWhereInput[] | CurrencySubscriptionWhereInput;
  OR?: CurrencySubscriptionWhereInput[] | CurrencySubscriptionWhereInput;
  NOT?: CurrencySubscriptionWhereInput[] | CurrencySubscriptionWhereInput;
}

export interface OrderUpdateWithoutUserDataInput {
  price?: Float;
  side?: OrderSide;
  currency?: CurrencyUpdateOneRequiredInput;
  quantity?: Float;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WalletPreviousValues {
  id: ID_Output;
  quantity: Float;
}

export interface WalletPreviousValuesPromise
  extends Promise<WalletPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Float>;
}

export interface WalletPreviousValuesSubscription
  extends Promise<AsyncIterator<WalletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Float>>;
}

export interface CurrencyConnection {
  pageInfo: PageInfo;
  edges: CurrencyEdge[];
}

export interface CurrencyConnectionPromise
  extends Promise<CurrencyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CurrencyEdge>>() => T;
  aggregate: <T = AggregateCurrencyPromise>() => T;
}

export interface CurrencyConnectionSubscription
  extends Promise<AsyncIterator<CurrencyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CurrencyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCurrencySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WalletSubscriptionPayload {
  mutation: MutationType;
  node: Wallet;
  updatedFields: String[];
  previousValues: WalletPreviousValues;
}

export interface WalletSubscriptionPayloadPromise
  extends Promise<WalletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WalletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WalletPreviousValuesPromise>() => T;
}

export interface WalletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WalletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WalletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WalletPreviousValuesSubscription>() => T;
}

export interface CurrencyEdge {
  node: Currency;
  cursor: String;
}

export interface CurrencyEdgePromise
  extends Promise<CurrencyEdge>,
    Fragmentable {
  node: <T = CurrencyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CurrencyEdgeSubscription
  extends Promise<AsyncIterator<CurrencyEdge>>,
    Fragmentable {
  node: <T = CurrencySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WalletEdge {
  node: Wallet;
  cursor: String;
}

export interface WalletEdgePromise extends Promise<WalletEdge>, Fragmentable {
  node: <T = WalletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WalletEdgeSubscription
  extends Promise<AsyncIterator<WalletEdge>>,
    Fragmentable {
  node: <T = WalletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  orders: <T = FragmentableArray<Order>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  wallets: <T = FragmentableArray<Wallet>>(
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  wallets: <T = Promise<AsyncIterator<WalletSubscription>>>(
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Order {
  id: ID_Output;
  price?: Float;
  side: OrderSide;
  quantity: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  price: () => Promise<Float>;
  side: () => Promise<OrderSide>;
  currency: <T = CurrencyPromise>() => T;
  quantity: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  price: () => Promise<AsyncIterator<Float>>;
  side: () => Promise<AsyncIterator<OrderSide>>;
  currency: <T = CurrencySubscription>() => T;
  quantity: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface CurrencySubscriptionPayload {
  mutation: MutationType;
  node: Currency;
  updatedFields: String[];
  previousValues: CurrencyPreviousValues;
}

export interface CurrencySubscriptionPayloadPromise
  extends Promise<CurrencySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CurrencyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CurrencyPreviousValuesPromise>() => T;
}

export interface CurrencySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CurrencySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CurrencySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CurrencyPreviousValuesSubscription>() => T;
}

export interface AggregateWallet {
  count: Int;
}

export interface AggregateWalletPromise
  extends Promise<AggregateWallet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWalletSubscription
  extends Promise<AsyncIterator<AggregateWallet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderPreviousValues {
  id: ID_Output;
  price?: Float;
  side: OrderSide;
  quantity: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  side: () => Promise<OrderSide>;
  quantity: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  side: () => Promise<AsyncIterator<OrderSide>>;
  quantity: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface AggregateCurrency {
  count: Int;
}

export interface AggregateCurrencyPromise
  extends Promise<AggregateCurrency>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCurrencySubscription
  extends Promise<AsyncIterator<AggregateCurrency>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CurrencyPreviousValues {
  id: ID_Output;
  name: String;
  lastPrice: Float;
}

export interface CurrencyPreviousValuesPromise
  extends Promise<CurrencyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastPrice: () => Promise<Float>;
}

export interface CurrencyPreviousValuesSubscription
  extends Promise<AsyncIterator<CurrencyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastPrice: () => Promise<AsyncIterator<Float>>;
}

export interface WalletConnection {
  pageInfo: PageInfo;
  edges: WalletEdge[];
}

export interface WalletConnectionPromise
  extends Promise<WalletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WalletEdge>>() => T;
  aggregate: <T = AggregateWalletPromise>() => T;
}

export interface WalletConnectionSubscription
  extends Promise<AsyncIterator<WalletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WalletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWalletSubscription>() => T;
}

export interface Wallet {
  id: ID_Output;
  quantity: Float;
}

export interface WalletPromise extends Promise<Wallet>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  currency: <T = CurrencyPromise>() => T;
  quantity: () => Promise<Float>;
}

export interface WalletSubscription
  extends Promise<AsyncIterator<Wallet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  currency: <T = CurrencySubscription>() => T;
  quantity: () => Promise<AsyncIterator<Float>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Currency {
  id: ID_Output;
  name: String;
  lastPrice: Float;
}

export interface CurrencyPromise extends Promise<Currency>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastPrice: () => Promise<Float>;
}

export interface CurrencySubscription
  extends Promise<AsyncIterator<Currency>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastPrice: () => Promise<AsyncIterator<Float>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Currency",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderSide",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Wallet",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
